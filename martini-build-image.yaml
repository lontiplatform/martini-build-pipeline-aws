---
version: 0.2

phases:
  install:
    commands:
      - echo "Installing yamllint..."
      - pip3 install yamllint

  pre_build:
    commands:
      - echo "Linting buildspec.yml..."
      - yamllint -c .yamllint martini-build-image.yaml || echo "YAML lint warnings found (non-blocking)"

      - echo "Fetching environment variables from Parameter Store..."
      - 'PARAMETER_NAME=${PARAMETER_NAME:-martini-build-image}'
      - 'echo "Using Parameter Store key: ${PARAMETER_NAME}"'

      - PARAMETER=$(aws ssm get-parameter --name "${PARAMETER_NAME}" --with-decryption --query "Parameter.Value" --output text)
      - export MARTINI_VERSION=$(echo "$PARAMETER" | jq -r '.MARTINI_VERSION')

      # Debug output
      - echo "Resolved ECR_REPO_URI=${ECR_REPO_URI}"
      - echo "Resolved MARTINI_VERSION=${MARTINI_VERSION}"

      # Fail fast if any required variable is missing
      - if [ -z "$ECR_REPO_URI" ] || [ -z "$MARTINI_VERSION" ]; then echo "Missing required environment variables."; exit 1; fi

  build:
    commands:
      - echo "Building Docker image for Martini version ${MARTINI_VERSION}..."
      - docker build --build-arg MARTINI_VERSION="${MARTINI_VERSION}" -t mr:"${MARTINI_VERSION}" .

      - echo "Authenticating with AWS ECR..."
      - aws ecr get-login-password | docker login --username AWS --password-stdin "${ECR_REPO_URI}"

      - echo "Tagging image..."
      - docker tag mr:"${MARTINI_VERSION}" "${ECR_REPO_URI}:${MARTINI_VERSION}"

  post_build:
    commands:
      - echo "Pushing image to ECR..."
      - docker push "${ECR_REPO_URI}:${MARTINI_VERSION}"

artifacts:
  files:
    - '**/*'
  discard-paths: true
