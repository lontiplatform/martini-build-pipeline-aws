version: 0.2

env:
  variables:
    # Default values for client_id and client_secret
    CLIENT_ID: "TOROMartini"

phases:
  install:
    commands:
      # Install dependencies if needed
      - echo "Skipping dependency installation (customize as needed)"

  pre_build:
    commands:
      # Fetch parameters from Parameter Store
      - PARAMETER=$(aws ssm get-parameter --name "${PARAMETER_NAME}" --with-decryption --query "Parameter.Value" --output text)
      - BASE_URL=$(echo $PARAMETER | jq -r '.BASE_URL')
      - MARTINI_ACCESS_TOKEN=$(echo $PARAMETER | jq -r '.MARTINI_ACCESS_TOKEN')

  build:
    commands:
      # Prepare staging folder
      - cd packages
      - for dir in */; do dir=${dir%*/}; zip -r "../${dir}.zip" "$dir"; done
      - cd ..

      # Upload zip files to the endpoint
      - |
        for zipfile in *.zip; do
          echo "Uploading $zipfile"
          curl -X POST "${BASE_URL}/esbapi/packages/upload?stateOnCreate=STARTED&replaceExisting=true" \
            -H "accept: application/json" \
            -F "file=@\"${zipfile}\";type=application/x-zip-compressed" \
            -H "Authorization: Bearer ${MARTINI_ACCESS_TOKEN}"
        done

  post_build:
    commands:
      # Verify packages were uploaded successfully
      - |
        echo "Verifying uploaded packages..."
        PACKAGES_RESPONSE=$(curl -s "${BASE_URL}/esbapi/packages" \
          -H "Authorization: Bearer ${MARTINI_ACCESS_TOKEN}")
        
        # Initialize tracking variables
        FAILED_PACKAGES=()
        VERIFICATION_FAILED=false
        
        # Check each package
        for zipfile in *.zip; do
          pkg_name=${zipfile%.zip}
          
          # Check if package exists in response
          if echo "$PACKAGES_RESPONSE" | grep -q "\"name\"\s*:\s*\"$pkg_name\""; then
            echo "SUCCESS: Package $pkg_name verified"
          else
            echo "ERROR: Package $pkg_name missing"
            FAILED_PACKAGES+=("$pkg_name")
            VERIFICATION_FAILED=true
          fi
        done
        
        # Final status report
        if [ "${#FAILED_PACKAGES[@]}" -gt 0 ]; then
          echo "Package verification failed for:"
          printf ' - %s\n' "${FAILED_PACKAGES[@]}"
          exit 1
        else
          echo "All packages verified successfully"
        fi

artifacts:
  files:
    - '*.zip'
  discard-paths: yes